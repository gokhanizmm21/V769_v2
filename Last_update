#include <EEPROM.h> // Ekranda olan sayacın enerji kesildiğinde gitmemesini sağlayan kütüphane
#include "SPI.h"
#include <Adafruit_GFX.h>
#include <ILI9488.h>

#define TFT_CS A5 //Ekran pini
#define TFT_DC A3 //Ekran pini
#define TFT_RST A4  //Ekran pini
#define TEST_SURESI 40 // Test yapılma süresi
#define PARCA 50 // Kasaya atılabilecek maks parça sayısı

ILI9488 tft = ILI9488(TFT_CS, TFT_DC, TFT_RST);

#define BUTTON_UP_PIN A12
#define BUTTON_DOWN_PIN A13
#define BUTTON_ENTER_PIN A14
#define BUTTON_ESC_PIN A15

#define ILI9488_WHITE 0xFFFF
#define ILI9488_BLUE 0x001F
#define ILI9488_GREEN 0x07E0
#define ILI9488_RED 0xF800
#define ILI9488_BLACK 0x0000

uint8_t selectedOption = 1;  // Başlangıçta ilk seçeneği seçiyoruz
bool enterPressed = false;   // Bu değişkeni sadece buton basıldığında kullanıyor,herhangi bir şeyi kontrol etmiyor
const char* isim[] = { "Plaka Lambasi" };

int pano = 19; //Fikstürden parçayı salması için verilen havanın rölesi

unsigned int flag; //Başarılı test sayısını tutan flag
int flag_2,error,surec,ParcaSayisi,OncekiDeger;
const int CheckPiston = 22;//pistonda bulunan switch
int relayPin= 24,KapakPin = 26; // piston rölesi ve kasadaki switch


const int Lamba = A10;
const int Conta1 = A8;
const int Conta2 = A9;



const int inputs[] = { Lamba, Conta1, Conta2,};
const int numInputs = sizeof(inputs) / sizeof(inputs[0]);
const int buzzerPin = A7;

void setup() {
  for (int i = 0; i < numInputs; i++) {
    pinMode(inputs[i], INPUT);
    digitalWrite(inputs[i], LOW);
  }
  pinMode(CheckPiston,INPUT); //input olarak ayarlandı
  pinMode(KapakPin,INPUT);  //input olarak ayarlandı
  pinMode(relayPin, OUTPUT);  //output olarak ayarlandı
  digitalWrite(relayPin, HIGH); //ilk başta röle ne durumda olması gerektiği ayarlandı olarak ayarlandı

  Serial.begin(9600);

  EEPROM.get(0,ParcaSayisi); //hafızadan parcasayisindan 0. biti alıyoruz 
  EEPROM.put(0,ParcaSayisi); //hafızadan parcasayisina yazıyoruz. Eğer bu iki kod arasına bir değer yazarsanız sayaç oradan başlar.

  pinMode(pano, OUTPUT); //Hava çıkışı output olarak ayarlandı
  pinMode(buzzerPin, OUTPUT);
  pinMode(BUTTON_UP_PIN, INPUT);
  pinMode(BUTTON_DOWN_PIN, INPUT);
  pinMode(BUTTON_ENTER_PIN, INPUT);
  pinMode(BUTTON_ESC_PIN, INPUT);


  tft.begin();
  tft.setRotation(3);
  tft.fillScreen(ILI9488_BLACK);
  tft.setTextSize(3);

  showMenu();

  while (!enterPressed) {
    checkButtons();
  }

  tft.fillScreen(ILI9488_BLACK);
}

void checkButtons() {
  if (digitalRead(BUTTON_UP_PIN) == HIGH) {
    if (selectedOption > 1) {
      selectedOption--;
      delay(200);
      showMenu();
    }
  }

  if (digitalRead(BUTTON_DOWN_PIN) == HIGH) {
    if (selectedOption < 6) {
      selectedOption++;
      delay(200);
      showMenu();
    }
  }

  if (digitalRead(BUTTON_ENTER_PIN) == HIGH) {
    enterPressed = true;
    delay(200);
  }
}

void showMenu() {
  tft.setCursor(50, 50);
  tft.setTextColor(ILI9488_WHITE);
  tft.print("Test Seciniz:");

  for (int i = 1; i <= 1; i++) {
    tft.setCursor(50, 100 + i * 30);
    if (selectedOption == i) {
      tft.setTextColor(ILI9488_GREEN);
    } else {
      tft.setTextColor(ILI9488_WHITE);
    }
    tft.print("Test ");
    tft.print(i);
    tft.print(" = ");
    tft.print(isim[i - 1]);
  }
}
void loop() {
  tft.setTextSize(4);
  digitalWrite(pano, LOW);
  delay(50);

  if (selectedOption == 1) {
     while(digitalRead(Conta1)==HIGH && digitalRead(Conta2)== HIGH){  //Başlangıçta parça takılı olup olmadığını kontrol ediyor eğer takılı ise hata veriyor. Bu tekrar test başlamasını önlüyor
      delay(100);
      displayError("Lambayi Cikarin");
        digitalWrite(buzzerPin, HIGH);
        delay(500);
        digitalWrite(buzzerPin, LOW);
        delay(500);
        digitalWrite(buzzerPin, HIGH);
        delay(500);
        digitalWrite(buzzerPin, LOW);
        delay(100);

    }
  
    while(digitalRead(CheckPiston) == HIGH){ //Piston açık mı kontrol ediyor eğer açık ise hata veriyor.
      delay(100);
      displayError("Piston Kapak acik");
        digitalWrite(buzzerPin, HIGH);
        delay(500);
        digitalWrite(buzzerPin, LOW);
        delay(500);
        digitalWrite(buzzerPin, HIGH);
        delay(500);
        digitalWrite(buzzerPin, LOW);
        delay(100);
        //Serial.println(digitalRead(CheckPiston));
    }
   
    bool testStarted = false;
    bool succes = false; // testin doğruluğunu gösteren yer
    flag = -1; 
    flag_2 = 0;
    error = 0; // hata durumu 0 ise teste girer.

  while (!testStarted) {
    if (digitalRead(Lamba) == LOW && digitalRead(Conta1) == LOW && digitalRead(Conta2) == LOW) { //plaka lambası takılı mı kontrolü yapıyor takılı değilse bekliyor.
        tft.setTextColor(ILI9488_WHITE);
        tft.setCursor(50, 100);
        tft.print("Test 1 Hazir,");
        tft.setCursor(50, 150);
        tft.print("Test etmek icin");
        tft.setCursor(50, 200);
        tft.print("Lambayi Takin");
        delay(100);
        KasayaParca();

        if(digitalRead(KapakPin) == LOW){ //kapak eğer açıksa kapak açık uyarısı veriyor ve sıfırlama yapıyor.
        tft.setTextColor(ILI9488_BLACK);
        tft.setCursor(50, 100);
        tft.print("Test 1 Hazir,");
        tft.setCursor(50, 150);
        tft.print("Test etmek icin");
        tft.setCursor(50, 200);
        tft.print("Lambayi Takin");
        delay(100);

          tft.setTextColor(ILI9488_BLACK);
          tft.setCursor(400,20);
          tft.print(ParcaSayisi);
          delay(100);
          tft.setTextColor(ILI9488_BLACK);
          tft.setCursor(400,20);
          tft.print(OncekiDeger);
          delay(100);

          while(digitalRead(KapakPin) == LOW){// eğer kapak hala açıksa burada döner kapak kapandığında buradan çıkar.
          displayError("Kasa kapak acik");
          delay(500);
          OncekiDeger = EEPROM.get(0,ParcaSayisi);// ekrana yazı yazdırmak için hafızadan bir önceki değeri alır.
          ParcaSayisi = 0;
          EEPROM.put(0,ParcaSayisi); // hafızaya geri atar.
          }
        }
      while(ParcaSayisi > PARCA-1){ // Sayaç ile istenilen değeri karşılaştırıp kasa dolu olup olmadığını kontrol eder . Kapak açılmasını bekler.
        tft.setTextColor(ILI9488_BLACK);
        tft.setCursor(50, 100);
        tft.print("Test 1 Hazir,");
        tft.setCursor(50, 150);
        tft.print("Test etmek icin");
        tft.setCursor(50, 200);
        tft.print("Lambayi Takin");
        delay(100);
          tft.setTextColor(ILI9488_RED);
          tft.setCursor(10, 100);
          tft.print("Kasa Doldu!");
          tft.setCursor(10, 150);
          tft.print("Kasayi bosaltiniz");
          delay(100);
          tft.setTextColor(ILI9488_BLACK);
          tft.setCursor(400,20);
          tft.print(EEPROM.get(0,ParcaSayisi));
          if(digitalRead(KapakPin) == LOW){ // Kapak açılmasını bekler kapak açıldığında parcasayisini sıfırlayıp hafızaya yazar.

          ParcaSayisi = 0;
          EEPROM.put(0,ParcaSayisi);
        }
          delay(3000);
          tft.setTextColor(ILI9488_BLACK);
          tft.setCursor(10, 100);
          tft.print("Kasa Doldu!");
          tft.setCursor(10, 150);
          tft.print("Kasayi bosaltiniz");
    }
        
      } else if (digitalRead(Conta1) == HIGH && digitalRead(Conta2) == HIGH) { //Parça takılı ise teste başlar.
        tft.setTextColor(ILI9488_BLACK);
        tft.setCursor(50, 100);
        tft.print("Test 1 Hazir,");
        tft.setCursor(50, 150);
        tft.print("Test etmek icin");
        tft.setCursor(50, 200);
        tft.print("Lambayi Takin");
        delay(100);
       
        tft.setTextColor(ILI9488_WHITE);
        tft.setCursor(50, 100);
        tft.print("Test Ediliyor");
        tft.setCursor(50, 150);
        tft.print("Lutfen Bekleyin");
        while(error == 0){ //error sıfırdan farklı bir değerse testten çıkar.
          surec = TEST_SURESI - flag_2; // Test süresini tam tersi olarak sayar. 0dan 40 sayar.
          tft.setTextColor(ILI9488_BLACK);
          tft.setCursor(50, 200);  // Sayım için yeni bir satır 
          tft.print("Kalan Sure: ");
          tft.print(surec+1);
          
          if (digitalRead(Lamba) == HIGH) { // LDR okursa flag artar
          flag++;
          Serial.println(flag);
          } 
          else if(digitalRead(Lamba)== LOW)
          { // LDR okumazsa testten çıkar
            error = 1;
          }     
          else if(digitalRead(CheckPiston) == HIGH){ // Piston açıksa testten çıkar
            error = 2;
          }
          if(digitalRead(KapakPin)== LOW){ // kapak açılırsa pistten çıkar
            error = 4;
          }
          if(surec == 0){ //Süre bittiğinde testi bitirmesi için verilen kod.
            error = 3;
          }
          testStarted = true;// baştaki whiledan çıkması için 
          tft.setTextColor(ILI9488_WHITE);
          tft.setCursor(50, 200);
          tft.print("Kalan Sure: ");
          tft.print(surec);
          delay(1000); // Her sayı için 1 saniye bekler
          flag_2++;
        }
        tft.setTextColor(ILI9488_BLACK);
        tft.setCursor(50, 100);
        tft.print("Test Ediliyor");
        tft.setCursor(50, 150);
        tft.print("Lutfen Bekleyin");
        tft.setTextColor(ILI9488_BLACK);
        tft.setCursor(50, 200);  // Sayım için yeni bir satır 
        tft.print("Kalan Sure: ");
        tft.print(surec);
        delay(100);

      } else { // Eğer hiçbir whilea girmezse conta hatasi verir.
        tft.setTextColor(ILI9488_BLACK);
        tft.setCursor(50, 100);
        tft.print("Test 1 Hazir,");
        tft.setCursor(50, 150);
        tft.print("Test etmek icin");
        tft.setCursor(50, 200);
        tft.print("Lambayi Takin");
        delay(100);
        displayError("Conta Hatasi");
        digitalWrite(buzzerPin, HIGH);
        delay(500);
        digitalWrite(buzzerPin, LOW);
        delay(500);
        digitalWrite(buzzerPin, HIGH);
        delay(500);
        digitalWrite(buzzerPin, LOW);
        delay(100);
      }
    }
    if(flag == TEST_SURESI){ //Test süresi flag değerine yani ldr okuduğu değere eşitse succes true olur.
      succes  = true;
      OncekiDeger = EEPROM.get(0,ParcaSayisi); //onceki değeri saklar.
      ParcaSayisi++;
      EEPROM.put(0, ParcaSayisi);
    }
    else{
      succes  = false;
    }
      if(succes == true) {

        tft.setTextColor(ILI9488_GREEN);
        tft.setCursor(10, 100);
        tft.print("TEST TAMAMLANDI! ");
        tft.setCursor(10, 150);
        tft.print("Lambayi Kasaya atin");
        

        digitalWrite(buzzerPin, HIGH);
        delay(1000);
        digitalWrite(buzzerPin, LOW);

        digitalWrite(relayPin, LOW);
        delay(100);
        digitalWrite(pano, HIGH);
        delay(1500);
        digitalWrite(pano, LOW);
        delay(2500);
        digitalWrite(relayPin, HIGH);
        delay(300);
        

        tft.setTextColor(ILI9488_BLACK);
        tft.setCursor(10, 100);
        tft.print("TEST TAMAMLANDI! ");
        tft.setCursor(10, 150);
        tft.print("Lambayi Kasaya atiniz");
        delay(100);
      }
      else if(succes == false){
          if(error == 4){  //While içinde olan errorların nasıl çıkış yapacağını değerlendiren yer
           tft.setTextColor(ILI9488_BLACK);
          tft.setCursor(400,20);
          tft.print(ParcaSayisi);

          tft.setTextColor(ILI9488_BLACK);
          tft.setCursor(400,20);
          tft.print(ParcaSayisi-1);
          while(digitalRead(KapakPin) == LOW){
          displayError("Kasa kapak acik");
          delay(500);
          ParcaSayisi = 0;
          EEPROM.put(0,ParcaSayisi);
          }
          }
        else if(error == 2){
          displayError("Piston Kapak acik");
          delay(500);
          digitalWrite(buzzerPin, LOW);
          delay(500);
          digitalWrite(buzzerPin, HIGH);
          delay(500);
          digitalWrite(buzzerPin, LOW);
          delay(100); 
        }
        else{
          tft.setTextColor(ILI9488_RED);
          tft.setCursor(10, 100);
          tft.print("Lamba Hatasi!");
          tft.setCursor(10, 150);
          tft.print("Kalite Kontrol");
          tft.setCursor(10, 200);
          tft.print("Bekleniyor");

          digitalWrite(buzzerPin, HIGH);
          delay(500);
          digitalWrite(buzzerPin, LOW);
          delay(500);
          digitalWrite(buzzerPin, HIGH);
          delay(500);
          digitalWrite(buzzerPin, LOW);
          delay(100);
          delay(5000);
          tft.setTextColor(ILI9488_BLACK);
          tft.setCursor(10, 100);
          tft.print("Lamba Hatasi!");
          tft.setCursor(10, 150);
          tft.print("Kalite Kontrol");
          tft.setCursor(10, 200);
          tft.print("Bekleniyor");
          
      }
    }
  }
}

void displayError(const char* errorMessage) {
  tft.setTextColor(ILI9488_RED);
  tft.setCursor(50, 100);
  tft.print(errorMessage);
  delay(1000);
  tft.setTextColor(ILI9488_BLACK);
  tft.setCursor(50, 100);
  tft.print(errorMessage);
}
void KasayaParca(){ //Ekrana yazı yazdırmak için kullanılan kod
  tft.setTextColor(ILI9488_BLACK);
  tft.setCursor(400, 20);
  tft.print(OncekiDeger);

  tft.setTextColor(ILI9488_WHITE);
  tft.setCursor(400, 20);
  tft.print(EEPROM.get(0,ParcaSayisi));
}
